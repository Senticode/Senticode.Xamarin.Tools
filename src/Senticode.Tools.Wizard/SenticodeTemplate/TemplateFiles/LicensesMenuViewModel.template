using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Xml;
using System.Xml.Serialization;
using Senticode.Xamarin.Tools.MVVM.Abstractions;
using Senticode.Xamarin.Tools.MVVM.Collections;
using $projectname$.Resources;
using Unity;

namespace $projectname$.ViewModels.Menu
{
    internal class LicensesMenuViewModel : ViewModelBase<AppCommands, AppSettings>
    {
        public LicensesMenuViewModel(IUnityContainer container)
        {
            container.RegisterInstance(this);
            Init();
        }

        public override string Title => ResourceKeys.Licenses;

        public ObservableRangeCollection<LicenseInfoViewModel> Licenses { get; } =
            new ObservableRangeCollection<LicenseInfoViewModel>();

        private void Init()
        {
            if (Licenses.Count == 0)
            {
                try
                {
                    var stream = Assembly.GetExecutingAssembly()
                        .GetManifestResourceStream($"{typeof(App).Namespace}.Resources.Licenses.xml");
                    if (stream != null)
                    {
                        using (var stringReader = new XmlTextReader(stream))
                        {
                            var licenses =
                                (LicenseInfoViewModel[]) new XmlSerializer(Licenses.ToArray().GetType()).Deserialize(
                                    stringReader);
                            Licenses.AddRange(licenses);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex);
                }
            }
        }
    }

    public class LicenseInfoViewModel
    {
        public string Name { get; set; }

        public string Version { get; set; }

        public string Uri { get; set; }

        public string UriText { get; set; }

        public string LicenseType { get; set; }

        public string LicenseUri { get; set; }
        
    }
}